fn write<T: Serializable>(value: T) => Result<None> {
    let bytes = value.to_bytes();
    if (buffer.remaining() < bytes.len()) {
        WriteError::BufferOverflow
    } else if (!buffer.write_bytes(bytes)) {
        WriteError::MalformedBytes
    } else {
        None
    }
}

enum WriteError {
    BufferOverflow,
    MalformedBytes,
}

impl Error for WriteError {

    fn message(self) => str {
        match self {
            BufferOverFlow => "BufferOverFlow",
            MalformedBytes => "MalformedBytes",
        }
    }

    fn source(self) => Option<Error> {
        None
    }
}